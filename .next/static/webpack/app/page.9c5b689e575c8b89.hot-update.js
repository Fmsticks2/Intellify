"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/hooks/useIntellifyContract.ts":
/*!*******************************************!*\
  !*** ./src/hooks/useIntellifyContract.ts ***!
  \*******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useIntellifyContract: function() { return /* binding */ useIntellifyContract; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/providers/provider-browser.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/contract/contract.js\");\n/* harmony import */ var _components_WalletProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/WalletProvider */ \"(app-pages-browser)/./src/components/WalletProvider.tsx\");\n/* __next_internal_client_entry_do_not_use__ useIntellifyContract auto */ \n\n\n// Contract ABI - only the functions we need\nconst INTELLIFY_ABI = [\n    // View functions\n    \"function getUserINFTs(address user) view returns (uint256[])\",\n    \"function getAIState(uint256 tokenId) view returns (tuple(string modelVersion, string[] knowledgeHashes, uint256 interactionCount, uint256 lastUpdated, bool isActive, address owner))\",\n    \"function getKnowledgeHashes(uint256 tokenId) view returns (string[])\",\n    \"function getKnowledgeMetadata(uint256 tokenId) view returns (tuple(string contentType, uint256 fileSize, string encryptionKey, uint256 uploadTimestamp, bool isEncrypted)[])\",\n    \"function totalSupply() view returns (uint256)\",\n    \"function tokenURI(uint256 tokenId) view returns (string)\",\n    \"function ownerOf(uint256 tokenId) view returns (address)\",\n    \"function isKnowledgeHashUsed(string knowledgeHash) view returns (bool)\",\n    // Write functions\n    \"function mintINFT(address to, string metadataURI, string knowledgeHash, string modelVersion) returns (uint256)\",\n    \"function addKnowledge(uint256 tokenId, string knowledgeHash, tuple(string contentType, uint256 fileSize, string encryptionKey, uint256 uploadTimestamp, bool isEncrypted) metadata)\",\n    \"function recordInteraction(uint256 tokenId, string interactionType)\",\n    \"function updateModelVersion(uint256 tokenId, string newModelVersion)\",\n    \"function deactivateINFT(uint256 tokenId)\",\n    \"function reactivateINFT(uint256 tokenId)\",\n    \"function burn(uint256 tokenId)\",\n    // Events\n    \"event INFTMinted(uint256 indexed tokenId, address indexed owner, string knowledgeHash)\",\n    \"event AIStateUpdated(uint256 indexed tokenId, uint256 interactionCount)\",\n    \"event KnowledgeAdded(uint256 indexed tokenId, string knowledgeHash)\",\n    \"event AIInteraction(uint256 indexed tokenId, address indexed user, string interactionType)\"\n];\n// Contract address - you'll need to update this after deployment\nconst CONTRACT_ADDRESS = \"0x1234567890123456789012345678901234567890\"; // Placeholder\n// 0G Testnet chain ID\nconst TARGET_CHAIN_ID = 16641;\nfunction useIntellifyContract() {\n    const { wallet } = (0,_components_WalletProvider__WEBPACK_IMPORTED_MODULE_1__.useWallet)();\n    const [contract, setContract] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [provider, setProvider] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [signer, setSigner] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isCorrectNetwork, setIsCorrectNetwork] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        initializeContract();\n    }, [\n        wallet.isConnected,\n        wallet.chainId\n    ]);\n    const initializeContract = async ()=>{\n        if ( true && window.ethereum && wallet.isConnected) {\n            try {\n                const browserProvider = new ethers__WEBPACK_IMPORTED_MODULE_2__.BrowserProvider(window.ethereum);\n                const signer = await browserProvider.getSigner();\n                setProvider(browserProvider);\n                setSigner(signer);\n                setIsCorrectNetwork(wallet.chainId === TARGET_CHAIN_ID);\n                if (wallet.chainId === TARGET_CHAIN_ID) {\n                    const contractInstance = new ethers__WEBPACK_IMPORTED_MODULE_3__.Contract(CONTRACT_ADDRESS, INTELLIFY_ABI, signer);\n                    setContract(contractInstance);\n                } else {\n                    setContract(null);\n                }\n            } catch (error) {\n                console.error(\"Error initializing contract:\", error);\n                setContract(null);\n                setProvider(null);\n                setSigner(null);\n            }\n        } else {\n            setContract(null);\n            setProvider(null);\n            setSigner(null);\n            setIsCorrectNetwork(false);\n        }\n    };\n    // Read functions\n    const getUserINFTs = async (userAddress)=>{\n        if (!contract) throw new Error(\"Contract not initialized\");\n        return await contract.getUserINFTs(userAddress);\n    };\n    const getAIState = async (tokenId)=>{\n        if (!contract) throw new Error(\"Contract not initialized\");\n        return await contract.getAIState(tokenId);\n    };\n    const getKnowledgeHashes = async (tokenId)=>{\n        if (!contract) throw new Error(\"Contract not initialized\");\n        return await contract.getKnowledgeHashes(tokenId);\n    };\n    const getKnowledgeMetadata = async (tokenId)=>{\n        if (!contract) throw new Error(\"Contract not initialized\");\n        return await contract.getKnowledgeMetadata(tokenId);\n    };\n    const getTotalSupply = async ()=>{\n        if (!contract) throw new Error(\"Contract not initialized\");\n        return await contract.totalSupply();\n    };\n    const getTokenURI = async (tokenId)=>{\n        if (!contract) throw new Error(\"Contract not initialized\");\n        return await contract.tokenURI(tokenId);\n    };\n    const getOwnerOf = async (tokenId)=>{\n        if (!contract) throw new Error(\"Contract not initialized\");\n        return await contract.ownerOf(tokenId);\n    };\n    const isKnowledgeHashUsed = async (knowledgeHash)=>{\n        if (!contract) throw new Error(\"Contract not initialized\");\n        return await contract.isKnowledgeHashUsed(knowledgeHash);\n    };\n    // Write functions\n    const mintINFT = async (to, metadataURI, knowledgeHash, modelVersion)=>{\n        if (!contract) throw new Error(\"Contract not initialized\");\n        return await contract.mintINFT(to, metadataURI, knowledgeHash, modelVersion);\n    };\n    const addKnowledge = async (tokenId, knowledgeHash, metadata)=>{\n        if (!contract) throw new Error(\"Contract not initialized\");\n        return await contract.addKnowledge(tokenId, knowledgeHash, metadata);\n    };\n    const recordInteraction = async (tokenId, interactionType)=>{\n        if (!contract) throw new Error(\"Contract not initialized\");\n        return await contract.recordInteraction(tokenId, interactionType);\n    };\n    const updateModelVersion = async (tokenId, newModelVersion)=>{\n        if (!contract) throw new Error(\"Contract not initialized\");\n        return await contract.updateModelVersion(tokenId, newModelVersion);\n    };\n    const deactivateINFT = async (tokenId)=>{\n        if (!contract) throw new Error(\"Contract not initialized\");\n        return await contract.deactivateINFT(tokenId);\n    };\n    const reactivateINFT = async (tokenId)=>{\n        if (!contract) throw new Error(\"Contract not initialized\");\n        return await contract.reactivateINFT(tokenId);\n    };\n    const burnINFT = async (tokenId)=>{\n        if (!contract) throw new Error(\"Contract not initialized\");\n        return await contract.burn(tokenId);\n    };\n    // Utility functions\n    const waitForTransaction = async (txHash)=>{\n        if (!provider) throw new Error(\"Provider not initialized\");\n        return await provider.waitForTransaction(txHash);\n    };\n    const estimateGas = async function(method) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        if (!contract) throw new Error(\"Contract not initialized\");\n        return await contract[method].estimateGas(...args);\n    };\n    return {\n        contract,\n        provider,\n        signer,\n        isCorrectNetwork,\n        // Read functions\n        getUserINFTs,\n        getAIState,\n        getKnowledgeHashes,\n        getKnowledgeMetadata,\n        getTotalSupply,\n        getTokenURI,\n        getOwnerOf,\n        isKnowledgeHashUsed,\n        // Write functions\n        mintINFT,\n        addKnowledge,\n        recordInteraction,\n        updateModelVersion,\n        deactivateINFT,\n        reactivateINFT,\n        burnINFT,\n        // Utility functions\n        waitForTransaction,\n        estimateGas\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useIntellifyContract.ts\n"));

/***/ })

});